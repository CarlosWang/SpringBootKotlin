buildscript {
    ext.groupName = 'liuwill'
    ext.kotlin_version = '1.1.0'
    ext.junit_version = '4.12'
    ext.freemarker_version = '2.3.23'
    ext.spting_boot_version = '1.5.2.RELEASE'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath("org.freemarker:freemarker:$freemarker_version")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spting_boot_version")

        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
    }
}

group 'liuwill'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: "kotlin"
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'docker'
apply plugin: 'org.springframework.boot'

apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    maven{ url 'http://maven.oschina.net/content/groups/public/'}
    jcenter()
}

dependencies {
    // tag::jetty[]
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    // end::jetty[]
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile	"org.freemarker:freemarker:$freemarker_version"

    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.23'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

jar {
    baseName = 'boot-kotlin-app'
    version =  '0.1.0'
}

bootRepackage {
    mainClass = 'com.liuwill.demo.kotlinBoot.SpringBootKotlinApplicationKt'
}

mainClassName = 'com.liuwill.demo.kotlinBoot.SpringBootKotlinApplicationKt'

task buildDocker(type: Docker, dependsOn: build, group: "custom") {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task runDocker(type:Exec,group: "custom"){
    println "$groupName/$jar.baseName"
    commandLine "bash","src/scripts/runDocker.sh","$groupName","$jar.baseName"
    //commandLine "docker","run -p 8080:8080 -t $group/$jar.baseName"
    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

sourceSets{
    main{
        java {srcDir "src/main/java"}
        kotlin {srcDir "src/main/kotlin"}
        resources {srcDir "src/main/resources"}
    }
    test{
        java {srcDir "src/test/java"}
        kotlin {srcDir "src/test/kotlin"}
        resources {srcDir "src/test/resources"}
    }
}

compileKotlin {
    kotlinOptions.suppressWarnings = true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task createJavaProject << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs()}
}

/*
test {
    //exclude 'com.liuwill.text.tools.*'
    filter {
        //include all integration tests
        includeTestsMatching "*Test"

        //include all tests from package
        includeTestsMatching "com.liuwill.kata.test.*"
    }
}*/

// [ FindBugs Start**/
findbugs{
    ignoreFailures=true
    findbugsTest.enabled=false
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
// ] FindBugs End**/

task stage(group: "custom"){
    dependsOn "build"
}

checkstyle{
    toolVersion = '7.8.2'
}

tasks.withType(Checkstyle) {
    reports {
        // xml.enabled = false
        // html.enabled = true
        // html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
    configFile = file('config/checkstyle/checkstyle.xml')
}

jacoco{
    toolVersion = "0.7.9"
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports{
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
        // html.destination = "${buildDir}/jacocoHtml"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['com.liuwill.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}